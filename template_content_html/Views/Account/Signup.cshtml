@model HomeHelp.Models.AgencyIndividualModel

@{
    ViewBag.Title = "Agency";
    Layout = "~/Views/Shared/_LoginLayout.cshtml";
}
@{Html.RenderAction("DisplayMessage", "Base", new { ShowMessage = TempData["ShowMessage"], MessageBody = @TempData["MessageBody"] });}
@using (Html.BeginForm("SignUp", "Account", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="login login-v3" data-pageload-addclass="animated fadeIn">
        
        <div class="login-content">
            <div class="row">
                <div class="col-md-2"><header class="text-center"><img class="logo-img" src="~/assets/img/login-bg/home-logo.png" /></header></div>
                <div class="col-md-10 m-t-15"><h3 class="text-center text_color align_text">Agency Sign Up</h3></div>
            </div>
           
            <form class="margin-bottom-0">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group m-b-20 text_color">
                            Full Name*
                        </div>
                        <div class="form-group m-b-20">
                            @Html.TextBoxFor(m => m.FullName, new
                       {
                           placeholder = Html.DisplayNameFor(m => m.FullName),
                           @class = "form-control input-lg",
                           //@pattern = "^[a-zA-Z][a-zA-Z0-9]*$",
                           @required = "required"
                       })
                        </div>
                        <div class="form-group m-b-20 text_color">
                            @Html.ValidationMessageFor(model => model.FullName, "Please fill the FullName.")
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group m-b-20 text_color">
                            Address*
                        </div>
                        <div class="form-group m-b-20">
                            @Html.TextBoxFor(m => m.Address, new
                       {
                           placeholder = Html.DisplayNameFor(m => m.Address),
                           @class = "form-control input-lg",
                           @required = "required",
                           id = "address"
                       })
                            @Html.HiddenFor(m => m.Latitude, new
                       {

                           @class = "form-control input-lg",
                           @id = "Latitude"
                       })
                            @Html.HiddenFor(m => m.Longitude, new
                       {

                           @class = "form-control input-lg",
                           @id = "Longitude"
                       })
                        </div>
                        <div class="form-group m-b-20">
                            @Html.ValidationMessageFor(model => model.FullName, "Please fill the Address.")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group m-b-20 text_color">
                            Email*
                        </div>
                        <div class="form-group m-b-20">
                            @Html.TextBoxFor(m => m.EmailId, new
                       {
                           placeholder = "Email",
                           @class = "form-control input-lg",
                           @type="email",
                           @pattern = @"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}" + @"\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\" + @".)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$",
                           @required = "required"
                       })
                        </div>
                        <div class="form-group m-b-20">
                            @Html.ValidationMessageFor(model => model.EmailId, "Please fill the Email.")
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group align_login text_color">
                            Password*(Password must be between 4 and 8 digits long and include at least one numeric digit.)
                        </div>
                        <div class="form-group m-b-20">
                            @Html.TextBoxFor(m => m.Password, new
                       {
                           placeholder = Html.DisplayNameFor(m => m.Password),
                           @class = "form-control input-lg",
                           @type = "Password",
                           @required = "required",
                           @pattern = "^(?=.*\\d).{4,8}$"
                       })
                        </div>
                        <div class="form-group m-b-20">
                            @Html.ValidationMessageFor(model => model.Password, "Please fill the Password.")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group m-b-20 text_color">
                            Work Rate*
                        </div>
                        <div class="form-group m-b-20">
                            @Html.TextBoxFor(m => m.WorkRate, new
                       {
                           placeholder = "Work Rate",
                           @class = "form-control input-lg",
                           @required = "required",
                           @type = "number",
                           @max="99"
                       })
                        </div>
                        <div class="form-group m-b-20">
                            @Html.ValidationMessageFor(model => model.WorkRate, "Please fill the work rate.")
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group align_login text_color">
                            Contact Number*(Should be 10 digits long and include numeric digit only.)
                        </div>
                        <div class="form-group m-b-20">
                            @Html.TextBoxFor(m => m.ContactNumber, new
                       {
                           placeholder = "Contact Number",
                           @class = "form-control input-lg",
                           @required = "required",
                           @type="number",
                       })
                        </div>
                        <div class="form-group m-b-20">
                            @Html.ValidationMessageFor(model => model.ContactNumber, "Please fill the Contact number.")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="login-buttons">
                            <a href="@Url.Action("LogOn","Account")" class="btn btn-success btn-block btn-lg">Cancel</a>
                        </div>
                        
                    </div>
                    <div class="col-md-6">
                        <div class="login-buttons">
                            <button id="btnSubmit" type="submit" class="btn btn-success btn-block btn-lg">Submit</button>
                        </div>
                    </div>
                    
                </div>
                <div class="row">
                    <div class="form-group m-b-20 m-t-20 text-center" style="color:white;font-size:larger">
                        @ViewBag.Error
                    </div>
                </div>
            </form>
        </div>
    </div>
}
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCnAfcUanP6UV_-jEekg_NwwPUaDJp6it4&libraries=places"></script>
<script type="text/javascript">
    function initMap() {
        var input = document.getElementById('address');
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.addListener('place_changed', function () {
            var place = autocomplete.getPlace();
            document.getElementById('Latitude').value= place.geometry.location.lat();
            document.getElementById('Longitude').value = place.geometry.location.lng();
            if (!place.geometry) {
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }
            var address = '';
            if (place.address_components) {
                address = [
                  (place.address_components[0] && place.address_components[0].short_name || ''),
                  (place.address_components[1] && place.address_components[1].short_name || ''),
                  (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }
        });
    }
    google.maps.event.addDomListener(window, 'load', initMap);
</script>  